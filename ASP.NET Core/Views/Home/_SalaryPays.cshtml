@using Furmanov.Data.Data
@using Furmanov.Services
@model Furmanov.MVP.MainView.MainViewModel

@{
    string selectedRow = ViewBag.SelectedRow;
}

<table id="tree-salary" class="table">
    <thead>
        <tr>
            <th style="width:25px"></th>
            <th style="width:25px"></th>
            <th style="width:25px"></th>
            <th style="width:25px"></th>
            <th>ФИО/Наименование</th>
            <th>Должность / Адрес</th>
            <th>Телефон</th>
            <th>Оклад</th>
            <th>Норма</th>
            <th>Факт</th>
            <th>Аванс</th>
            <th>Штрафы</th>
            <th>Премии</th>
            <th>К выплате</th>
            <th>Комментарии</th>
        </tr>
    </thead>
    <tbody>
        @{
            var projects = Model.SalaryPays.Where(p => p.Type == ObjType.Project).ToArray();
            for (int i = 0; i < (projects.Any() ? projects.Length : 1); i++)
            {
                var project = projects.Any() ? projects[i] : null;
                var objects = Model.SalaryPays.Where(p => p.ParentId == project?.ViewModelId &&
                                                          p.Type == ObjType.Object).ToArray();
                @if (project != null)
                {
                    project.HasChildren = objects.Any();
                    <tr class="project-row"
                        id="@project?.ViewModelId.ToId()"
                        onclick="SelectRow('@project.ViewModelId.ToId()','tree-salary'),GetWorkedDays(-1)"
                        ondblclick="ShowHideRow('@project.ViewModelId.ToId()')"
                        @(project.IsExpanded ? "data-expand=true" : "data-expand=false")>
                        @await Html.PartialAsync("_SalaryPayRow", project)
                    </tr>
                }
                foreach (var obj in objects)
                {
                    var pays = Model.SalaryPays.Where(p => p.ParentId == obj.ViewModelId).ToArray();
                    obj.HasChildren = pays.Any();
                    <tr class="object-row @project?.ViewModelId.ToId()"
                        id="@obj.ViewModelId.ToId()"
                        onclick="SelectRow('@obj.ViewModelId.ToId()', 'tree-salary'),GetWorkedDays(-1)"
                        ondblclick="ShowHideRow('@obj.ViewModelId.ToId()')"
                        @(obj.IsExpanded ? "data-expand=true" : "data-expand=false")
                        @($"style=display:{(!project?.IsExpanded ?? false ? "none" : "table-row")}")>
                        @await Html.PartialAsync("_SalaryPayRow", obj)
                    </tr>
                    foreach (var pay in pays)
                    {
                        <tr id="@pay.ViewModelId.ToId()"
                            class="pay-row @obj.ViewModelId.ToId()"
                            onclick="SelectRow('@pay.ViewModelId.ToId()','tree-salary'),GetWorkedDays(@pay.Id)"
                            @($"style=display:{(!obj.IsExpanded ? "none" : "table-row")}")>
                            @await Html.PartialAsync("_SalaryPayRow", pay)
                        </tr>
                    }
                }
            }
            var summary = Model.SalaryPays.FirstOrDefault(p => p.Type == ObjType.Summary);
            if (summary != null)
            {
                <tr id="@summary.ViewModelId.ToId()"
                    onclick="SelectRow('@summary.ViewModelId.ToId()','tree-salary'),GetWorkedDays(-1)"
                    class="summary-row">
                    @await Html.PartialAsync("_SalaryPayRow", summary)
                </tr>
            }
        }
    </tbody>
</table>